import wandb
import random
import numpy as np
from PIL import Image


def init_wandb(model_name, dataset_name, params):
    run_name = f"{model_name}_{dataset_name}_{'_'.join([f'{k}{v}' for k, v in params.items()])}"
    wandb.init(
        project="PII_Detection",  # üìå –ü—Ä–æ–µ–∫—Ç
        name=run_name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        group=model_name,  # üìå –ì—Ä—É–ø–ø–∞ (–ø–æ –º–æ–¥–µ–ª—è–º)
        config={
            "model": model_name,
            "dataset": dataset_name,
            **params
        },
    )


def log_detection_metrics(model_name, dataset_name, class_metrics, predictions, ground_truths, image_paths,
                          inference_time, num_images=10):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º + –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ W&B.

    :param model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (Yolov10, LayoutLMv3 –∏ —Ç.–¥.)
    :param dataset_name: –î–∞—Ç–∞—Å–µ—Ç (random_split / layout_split / benchmark)
    :param class_metrics: –°–ª–æ–≤–∞—Ä—å {class_name: {"Precision": val, "Recall": val, "mAP": val, "F1": val}}
    :param predictions: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –±–æ–∫—Å—ã –º–æ–¥–µ–ª–∏
    :param ground_truths: –ò—Å—Ç–∏–Ω–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    :param image_paths: –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    """

    wandb.init(
        project="PII_Detection",
        name=f"{model_name}_{dataset_name}_metrics",
        group=model_name,
        notes=f"Detection metrics on {dataset_name}"
    )

    # üîπ 1. –õ–æ–≥–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
    table = wandb.Table(columns=["Class", "Images", "Instances", "Precision", "Recall", "mAP", "F1"])

    for class_name, metrics in class_metrics.items():
        table.add_data(class_name, metrics["Images"], metrics["Instances"], metrics["Precision"], metrics["Recall"],
                       metrics["mAP"], metrics["F1"])

    wandb.log({f"Detection Metrics ({dataset_name})": table})

    wandb.log({f"Inference Time ({dataset_name})": inference_time})

    # üîπ 2. –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    img_table = wandb.Table(columns=["Image", "Ground Truth", "Prediction"])
    indices = random.sample(range(len(image_paths)),
                            min(num_images, len(image_paths)))  # –ë–µ—Ä—ë–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    for idx in indices:
        img = np.array(Image.open(image_paths[idx]))
        gt = ground_truths[idx]
        pred = predictions[idx]

        img_table.add_data(wandb.Image(img), gt, pred)

    wandb.log({f"Predictions ({dataset_name})": img_table})
    wandb.finish()
